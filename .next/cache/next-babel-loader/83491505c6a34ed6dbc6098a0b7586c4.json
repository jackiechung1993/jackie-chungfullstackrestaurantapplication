{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jackie-PC\\\\Documents\\\\MIT\\\\restaurantapp - sqlite\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, Container, Row, Col } from \"reactstrap\";\nconst GET_RESTAURANTS = gql`\n  query($name: String!) {\n    restaurants(where: { name_contains: $name }) {\n      id\n      name\n      description\n      image {\n        url\n      }\n    }\n  }\n`;\n\nfunction RestaurantList({\n  search\n}) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS, {\n    variables: {\n      name: search\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  if (!data || data.restaurants.length === 0) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 54\n    }\n  }, \"No Restaurants Found\");\n  const filteredRestaurants = data.restaurants.filter(res => res.name.toLowerCase().includes(search.toLowerCase()));\n\n  const renderDishes = (restaurantID, searchQuery) => {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      search: searchQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const restaurantList = filteredRestaurants.map(res => __jsx(Col, {\n    xs: \"6\",\n    sm: \"4\",\n    key: res.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    style: {\n      margin: \"0 0.5rem 20px 0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(CardImg, {\n    top: true,\n    style: {\n      height: 200\n    },\n    src: `http://localhost:1337${res.image.url}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), __jsx(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, res.description)), __jsx(\"div\", {\n    className: \"card-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    color: \"info\",\n    onClick: () => setRestaurantID(res.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, res.name)))));\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, restaurantList), __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, restaurantID > 0 && renderDishes(restaurantID, search)));\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/Jackie-PC/Documents/MIT/restaurantapp - sqlite/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","Container","Row","Col","GET_RESTAURANTS","RestaurantList","search","restaurantID","setRestaurantID","cart","loading","error","data","variables","name","message","restaurants","length","filteredRestaurants","filter","res","toLowerCase","includes","renderDishes","searchQuery","restaurantList","map","id","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nconst GET_RESTAURANTS = gql`\n  query($name: String!) {\n    restaurants(where: { name_contains: $name }) {\n      id\n      name\n      description\n      image {\n        url\n      }\n    }\n  }\n`;\n\nfunction RestaurantList({ search }) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n\n  const { loading, error, data } = useQuery(GET_RESTAURANTS, {\n    variables: { name: search },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  if (!data || data.restaurants.length === 0) return <p>No Restaurants Found</p>;\n\n  const filteredRestaurants = data.restaurants.filter((res) =>\n    res.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  const renderDishes = (restaurantID, searchQuery) => {\n    return <Dishes restId={restaurantID} search={searchQuery} />;\n  };\n\n  const restaurantList = filteredRestaurants.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={`http://localhost:1337${res.image.url}`}\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n          <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>\n            {res.name}\n          </Button>\n        </div>\n      </Card>\n    </Col>\n  ));\n\n  return (\n    <Container>\n      <Row xs=\"3\">\n        {restaurantList}\n      </Row>\n      <Row xs=\"3\">\n        {restaurantID > 0 && renderDishes(restaurantID, search)}\n      </Row>\n    </Container>\n  );\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}